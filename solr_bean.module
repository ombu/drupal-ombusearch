<?php

/**
 * @file
 * Provides solr integration into beans.
 */

/**
 * Implements hook_bean_types_api_info().
 */
function solr_bean_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_bean_types().
 */
function solr_bean_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'solr_bean');

  $plugins['solr_bean'] = array(
    'label' => t('Search Block'),
    'handler' => array(
      'class' => 'SolrBean',
      'parent' => 'BeanPlugin',
      'path' => $plugin_path . '/includes',
      'file' => 'SolrBean.php',
    ),
    'editable' => TRUE,
  );

  return $plugins;
}

/**
 * Implements hook_facetapi_url_processors().
 */
function solr_bean_facetapi_url_processors() {
  return array(
    'solr_bean_url_processor' => array(
      'handler' => array(
        'label' => t('Helper URL processor for solr beans.'),
        'class' => 'SolrBeanUrlProcessor',
      ),
    ),
  );
}

/**
 * Implements hook_facetapi_search_info_alter().
 */
function solr_bean_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as &$info) {
    // Use solr bean wrapper for url processing.
    $info['url processor'] = 'solr_bean_url_processor';
  }
}

/**
 * Implements hook_theme().
 */
function solr_bean_theme($existing, $type, $theme, $path) {
  $themes = array(
    'solr_bean_facet_settings_table' => array(
      'render element' => 'form',
    ),
    'solr_bean_results' => array(
      'variables' => array(
        'results' => array(),
        'module' => NULL,
        'search_page' => NULL,
        'bean' => NULL,
      ),
      'template' => 'solr-bean-results',
    ),
  );

  return $themes;
}

/**
 * Implements hook_solr_bean_view_modes().
 *
 * Exposes default search results and all node view types as view modes for solr
 * beans.
 */
function solr_bean_solr_bean_view_modes() {
  // Default search results that uses theme_search_result() for each result.
  $view_mode_options['solr'] = t('Search results');

  // Pull in all node view types.
  $entity_info = entity_get_info('node');
  foreach ($entity_info['view modes'] as $machine_name => $info) {
    if ($info['custom settings'] === TRUE) {
      $view_mode_options[$machine_name] = $info['label'];
    }
  }

  return $view_mode_options;
}

/**
 * Returns all available view modes for solr beans.
 */
function solr_bean_view_modes() {
  $view_modes = module_invoke_all('solr_bean_view_modes');

  // Allow other module to alter view modes.
  drupal_alter('solr_bean_view_modes', $view_modes);

  return $view_modes;
}

/**
 * Form for solr bean filters.
 */
function solr_bean_search_form($form, $form_state, BeanPlugin $solr_bean_plugin) {
  $form['#id'] = 'search-form';
  $form['#attributes']['class'][] = 'search-form';
  $form['#bean'] = $solr_bean_plugin->bean;

  // Add all visible facets.
  $facets = $solr_bean_plugin->buildFacets();
  if ($facets) {
    $form['f'] = $facets;
  }

  // Add a custom search form if required.
  if ($solr_bean_plugin->bean->facets['keys']['visible']) {
    $form['keys'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter terms'),
      '#default_value' => isset($_GET['keys']) ? $_GET['keys'] : $solr_bean_plugin->bean->facets['keys']['default_value'],
      '#size' => 20,
      '#maxlength' => 255,
    );
  }

  if (isset($form['keys']) || isset($form['f'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#weight' => 100,
    );
  }

  return $form;
}

/**
 * Submit handler for solr bean filtering.
 */
function solr_bean_search_form_submit($form, &$form_state) {
  $query = array();
  if ($form_state['values']['keys']) {
    $query['keys'] = $form_state['values']['keys'];
  }
  $form_state['redirect'] = array(current_path(), array('query' => $query));
}

/**
 * Themes the facet settings form for the search bean.
 */
function theme_solr_bean_facet_settings_table($variables) {
  $form = $variables['form'];

  $output = '';

  $header = array(
    'label' => array('data' => t('Facet')),
    'visible' => array('data' => t('Visible')),
    'default_value' => array('data' => t('Default value')),
  );

  foreach (element_children($form) as $child) {
    $facet = $form[$child]['#facet'];
    // Builds rows.
    $rows[$child] = array(
      'data' => array(
        check_plain($facet['label']) . "<div class='description'>" . filter_xss($facet['description']) . '</div>',
        drupal_render($form[$child]['visible']),
        drupal_render($form[$child]['default_value']),
      ),
    );
  }

  $output .= drupal_render_children($form);
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'facetapi-realm-settings'),
  ));

  return $output;
}

/**
 * Preprocess variables for solr-bean-results.tpl.php.
 */
function template_preprocess_solr_bean_results(&$variables) {
  $bean = $variables['bean'];

  $variables['classes_array'][] = 'solr-bean-' . $bean->results_view_mode;
  $variables['view_mode'] = $bean->results_view_mode;

  $variables['theme_hook_suggestions'][] = 'solr_bean_results__' . str_replace('-', '_', $bean->results_view_mode);

  // Fetch our current query.
  $env_id = NULL;
  if (!empty($variables['search_page']['env_id'])) {
    $env_id = $variables['search_page']['env_id'];
  }
  $query = apachesolr_current_query($env_id);

  if ($query) {
    $variables['query'] = $query;
    $variables['response'] = apachesolr_static_response_cache($query->getSearcher());
  }
  if (empty($variables['response'])) {
    $variables['description'] = '';
    return;
  }
  $total = $variables['response']->response->numFound;
  $params = $variables['query']->getParams();

  $variables['description'] = t('Showing items @start through @end of @total.', array(
    '@start' => $params['start'] + 1,
    '@end' => $params['start'] + $params['rows'] - 1,
    '@total' => $total,
  ));
  // Hide pager, if necessary.
  if ($bean->settings['pager']) {
    pager_default_initialize($total, $params['rows'], $bean->settings['pager_element']);
    $variables['pager'] = theme('pager', array('tags' => NULL, 'element' => $bean->settings['pager_element']));
  }
  else {
    $variables['pager'] = '';
  }

  // Handle the specific results view mode of `solr`.
  // Other modules providing view modules should set
  // $variables['search_results'] in their own preprocess functions, otherwise
  // results will be rendered using node_view in
  // template_process_solr_bean_results().
  if ($bean->results_view_mode == 'solr') {
    foreach ($variables['results'] as $result) {
      $variables['search_results'][] = array(
        '#theme' => 'search_result',
        '#result' => $result,
        '#module' => $variables['module'],
      );
    }
  }
}

/**
 * Process variables for solr-bean-results.tpl.php.
 */
function template_process_solr_bean_results(&$variables) {
  // Default to rendering results using entity_view.
  if (empty($variables['search_results'])) {
    foreach ($variables['results'] as $result) {
      $entity_type = $result['entity_type'];
      $entity_id = $result['fields']['entity_id'];

      // Default to teaser if view mode isn't a valid node view.
      $entity_info = entity_get_info($entity_type);
      if (!isset($entity_info['view modes'][$variables['bean']->results_view_mode])) {
        $variables['bean']->results_view_mode = 'teaser';
      }

      // Render entity appropriately.
      if ($entity_info) {
        $entity = entity_load($entity_type, array($entity_id));
        if ($entity) {
          $rendered_result = entity_view(
            $entity_type,
            $entity,
            $variables['bean']->results_view_mode
          );
          $rendered_result = $rendered_result[$entity_type][$entity_id];
          $rendered_result['#result'] = $result;

          $variables['search_results'][$entity_id] = $rendered_result;
        }
      }
      else {
        // todo: if result is not an entity, then render using default solr
        // result.
      }
    }
  }
}
